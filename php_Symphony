//ControlUsersProvider.php

<?php


namespace App\Services\ControlUsers\Application;


use App\Services\ControlUsers\Application\View\ControlUsersView;
use App\Services\ControlUsers\Domain\Model\ControlUsers;
use App\Services\ControlUsers\Infrastructure\ControlUsersRepository;


class ControlUsersProvider
{
    /**
     * @var ControlUsersRepository
     */
    private $controlUsersRepository;

    public function __construct(ControlUsersRepository $controlUsersRepository)
    {
        $this->controlUsersRepository = $controlUsersRepository;
    }

    public function getControlUsers(): array
    {
        $controlUsers = $this->controlUsersRepository->getAll();

        return array_map(function (ControlUsers $controlUsers) {
            return ControlUsersView::createFrom($controlUsers);
        }, $controlUsers);
    }
}

//ControlUsersView.php

<?php


namespace App\Services\ControlUsers\Application\View;


use App\Services\ControlUsers\Domain\Model\ControlUsers;

class ControlUsersView implements \JsonSerializable
{
    /**
     * @var int
     */
    private $id;
    /**
     * @var string
     */
    private $name;
    /**
     * @var string
     */
    private $password;

    public function __construct(int $id, string $name, string $password)
    {
        $this->id = $id;
        $this->name = $name;
        $this->password = $password;
    }

    public static function createFrom(ControlUsers $ControlUsers): self
    {
        return new self($controlUsers->getId(), $controlUsers->getName(), $controlUsers->getPassword());
    }

    public function jsonSerialize()
    {
        return [
            'id'     => $this->id,
            'name' => $this->name,
            'password'   => $this->password,
        ];
    }
}


//ControlUsersRepository.php
<?php

namespace App\Services\ControlUsers\Infrastructure;

use App\Services\ControlUsers\Domain\Model\ControlUsers;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

class ControlUsersRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
       parent::__construct($registry, ControlUsers::class);
    }

	public function getAll(): array
	{
		return $this->findAll();
	}
}



//SipBuddiesController.php

<?php

namespace App\Controller;

use App\Services\SipBuddies\Application\SipBuddiesProvider;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\Routing\Annotation\Route;

class SipBuddiesController extends AbstractController
{
    /**
     * @var SipBuddiesProvider
     */
    private $sipBuddiesProvider;

    public function __construct(SipBuddiesProvider $sipBuddiesProvider)
    {
        $this->sipBuddiesProvider = $sipBuddiesProvider;
    }


    /**
     * @Route("/admin/get_users", name="get_users")
     */
    public function getUsers(): JsonResponse
    {
        return new JsonResponse($this->sipBuddiesProvider->getSipBuddies());

    }

}
	
//entity ControlUsers.php
<?php

namespace App\Services\ControlUsers\Domain\Model;
//use Symfony\Component\Security\Core\User\UserInterface;
use Doctrine\ORM\Mapping as ORM;

/**
 * ControlUsers
 *
 * @ORM\Table(name="control_users")
 * @ORM\Entity
 */
class ControlUsers
{
    /**
     * @var int
     *
     * @ORM\Column(name="id", type="integer", nullable=false)
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="IDENTITY")
     */
    private $id;

    /**
     * @var string
     *
     * @ORM\Column(name="name", type="string", length=30, nullable=false)
     */
    private $name;

    /**
     * @var string
     *
     * @ORM\Column(name="password", type="string", length=50, nullable=false)
     */
    private $password;

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getName(): ?string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;

        return $this;
    }

    public function getPassword(): ?string
    {
        return $this->password;
    }

    public function setPassword(string $password): self
    {
        $this->password = $password;

        return $this;
    }


}






